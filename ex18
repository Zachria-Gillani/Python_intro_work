#this one is like your scripts with argv
def print_two(*args):
    arg1, arg2 = args
    print(f"arg1: {arg1}, arg2: {arg2}")

#The def allows for a function to be placed in.  print_two is that function name. This is similiar to the argv feature but for functions
#The colon after *args): all lines that are indented four spaces will become attatched to print_two.
#The first indented line is the one that unpacks the arguments, the same as with scipts for argv
#To demonstrate how it works we print these arguments out, just like we would in a script.

#ok, that *args is actually pointless, we can just do this
def print_two_again(arg1, arg2):
    print(f"arg1: {arg1}, arg2: {arg2}")

#this just takes one Arguments
def print_one(arg1):
    print(f"arg1: {arg1}")

    #Without the f in the above, the output run in the shell will just say arg1: {arg1} instead of first

#this one takes no Arguments
def print_none():
    print("I got nothin'.")


print_two("zed", "Shaw")
print_two_again("Zed","Shaw")
print_one("First!")
print_none()

#Lines 26-29 are where I am calling/using/running my functions
